var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API Reference","title":"API Reference","text":"CurrentModule = OmniParserIconDetectors","category":"page"},{"location":"api/#API","page":"API Reference","title":"API","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [OmniParserIconDetectors]","category":"page"},{"location":"api/#OmniParserIconDetectors.DetectedItem","page":"API Reference","title":"OmniParserIconDetectors.DetectedItem","text":"DetectedItem\n\nA struct to hold the icon detection bbox together with its confidence and ID.\n\n\n\n\n\n","category":"type"},{"location":"api/#OmniParserIconDetectors.IconDetectionModel","page":"API Reference","title":"OmniParserIconDetectors.IconDetectionModel","text":"IconDetectionModel\n\nOmniParser model for icon detection, including the ONNX session for inference.\n\nReturns a functor model(img) that returns a vector of DetectedItem.\n\n\n\n\n\n","category":"type"},{"location":"api/#OmniParserIconDetectors.IconDetectionModel-Tuple{Any}","page":"API Reference","title":"OmniParserIconDetectors.IconDetectionModel","text":"(model::IconDetectionModel)(img; kwargs...)\n\nRun inference on img using the IconDetectionModel and function detect_icons.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.show-Tuple{IO, DetectedItem}","page":"API Reference","title":"Base.show","text":"Base.show(io::IO, detection::IconDetection)\n\nCustom display for IconDetection objects.\n\n\n\n\n\n","category":"method"},{"location":"api/#OmniParserIconDetectors.calculate_iou-Tuple{NTuple{4, Float64}, NTuple{4, Float64}}","page":"API Reference","title":"OmniParserIconDetectors.calculate_iou","text":"calculate_iou(box1::NTuple{4,Float64}, box2::NTuple{4,Float64})\n\nCalculate Intersection over Union (IoU) between two bounding boxes. Each box is represented as (x1, y1, x2, y2).\n\n\n\n\n\n","category":"method"},{"location":"api/#OmniParserIconDetectors.detect_icons-Tuple{IconDetectionModel, String}","page":"API Reference","title":"OmniParserIconDetectors.detect_icons","text":"detect_icons(model::IconDetectionModel, image_path::String;\n    verbose::Bool = false, iou_threshold::Real = 0.1, box_threshold::Real = 0.15,\n    min_scaled_confidence::Integer = 25)\n\nDetect icons in the given image and return their coordinates and confidence scores.\n\nArguments:\n\nmodel: The IconDetectionModel to use for detection\nimage_path: Path to the image file to analyze\nverbose: Whether to print detection statistics (default: false)\niou_threshold: Minimum Intersection over Union threshold for merging overlapping boxes (default: 0.1, smaller is more strict)\nbox_threshold: Minimum confidence threshold for keeping a detection box (default: 0.15, ranges from 0 to 1)\nminscaledconfidence: Minimum scaled confidence score (0-100) as a percentage of the highest confidence found (default: 25)\n\nReturns: Vector of DetectedItem objects, where each item contains:\n\nid: Unique identifier for the detection\nlabel: Class label (currently unused)\nconfidence: Detection confidence score (0-100)\nbbox: Bounding box coordinates as (x1,y1,x2,y2) tuple\n\n\n\n\n\n","category":"method"},{"location":"api/#OmniParserIconDetectors.draw_bbox!-Tuple{AbstractMatrix, Int64, Int64, Int64, Int64, ColorTypes.Color}","page":"API Reference","title":"OmniParserIconDetectors.draw_bbox!","text":"draw_bbox!(img::AbstractMatrix, x1::Int, y1::Int, x2::Int, y2::Int,\n           color::ColorTypes.Color; thickness::Int = 2)\n\nDraw a bounding box on an image with specified thickness.\n\nArguments\n\nimg: Target image matrix to draw on\nx1: Left X-coordinate of box\ny1: Top Y-coordinate of box\nx2: Right X-coordinate of box\ny2: Bottom Y-coordinate of box\ncolor: Color of the bounding box\nthickness: Line thickness (default: 2)\n\n\n\n\n\n","category":"method"},{"location":"api/#OmniParserIconDetectors.draw_detections-Tuple{String, AbstractVector{DetectedItem}}","page":"API Reference","title":"OmniParserIconDetectors.draw_detections","text":"draw_detections(image_path::String, detections::AbstractVector{DetectedItem}; \n               thickness::Int=2, save_path::String=\"\")\n\nDraw detection boxes on an image loaded from image_path. Returns the annotated image.\n\nArguments\n\nimage_path: Path to the input image\ndetections: Vector of DetectedItem objects to draw\nthickness: Line thickness for drawing boxes (default: 2)\nsave_path: Optional path to save the annotated image (default: \"\")\n\nReturns\n\nThe annotated image with detection boxes drawn\n\n\n\n\n\n","category":"method"},{"location":"api/#OmniParserIconDetectors.draw_detections-Union{Tuple{C}, Tuple{AbstractMatrix{C}, AbstractVector{DetectedItem}}} where C<:ColorTypes.Color","page":"API Reference","title":"OmniParserIconDetectors.draw_detections","text":"draw_detections(img::AbstractMatrix{C},\n    detections::AbstractVector{DetectedItem}; thickness::Int = 2,\n    save_path::String = \"\", verbose::Bool = false) where {C <:\n                                                          ColorTypes.Color}\n\nDraw detection boxes on image img using the coordinates and confidence scores from detections.\n\nReturns the annotated image.\n\nArguments\n\nimg: Input image matrix\ndetections: Vector of DetectedItem objects containing detection information\nthickness: Line thickness for drawing boxes (default: 2)\nsave_path: Optional path to save the annotated image (default: \"\")\nverbose: Whether to print information about the detection process (default: false)\n\n\n\n\n\n","category":"method"},{"location":"api/#OmniParserIconDetectors.draw_digit!","page":"API Reference","title":"OmniParserIconDetectors.draw_digit!","text":"draw_digit!(img::AbstractMatrix, digit::Char, x::Int, y::Int,\n            scale::Float64 = 1.0, color::ColorTypes.Color = RGB{N0f8}(1,1,1))\n\nDraw a single digit character onto an image matrix.\n\nArguments\n\nimg: Target image matrix to draw on\ndigit: Character ('0'-'9') to draw\nx: X-coordinate for digit placement\ny: Y-coordinate for digit placement  \nscale: Size scaling factor (default: 1.0)\ncolor: Color of the digit (default: white)\n\n\n\n\n\n","category":"function"},{"location":"api/#OmniParserIconDetectors.draw_label!-Union{Tuple{C}, Tuple{AbstractMatrix{C}, Int64, Int64, Int64, Float64, C}} where C<:ColorTypes.Color","page":"API Reference","title":"OmniParserIconDetectors.draw_label!","text":"draw_label!(img::AbstractMatrix{C}, x1::Int, y1::Int,\n            detection_id::Int, confidence::Float64, color::C; thickness::Int = 2)\n\nDraw a detection label box with ID and confidence score.\n\nArguments\n\nimg: Target image matrix to draw on\nx1: X-coordinate for label placement\ny1: Y-coordinate for label placement\ndetection_id: Detection ID number to display\nconfidence: Confidence score (0-100) affecting label color\ncolor: Base color for the label box\nthickness: Line thickness for the box (default: 2)\n\n\n\n\n\n","category":"method"},{"location":"api/#OmniParserIconDetectors.draw_number!","page":"API Reference","title":"OmniParserIconDetectors.draw_number!","text":"draw_number!(img::AbstractMatrix, number::Number, x::Int, y::Int,\n            scale::Float64 = 1.0, color::ColorTypes.Color = RGB{N0f8}(1,1,1))\n\nDraw a number (including negative numbers) onto an image matrix.\n\nArguments\n\nimg: Target image matrix to draw on\nnumber: Number to draw (can be negative)\nx: X-coordinate for number placement\ny: Y-coordinate for number placement\nscale: Size scaling factor (default: 1.0)\ncolor: Color of the number (default: white)\n\n\n\n\n\n","category":"function"},{"location":"api/#OmniParserIconDetectors.load_detection_model-Tuple{String}","page":"API Reference","title":"OmniParserIconDetectors.load_detection_model","text":"load_detection_model(path::String)\n\nLoads an onnx version of the IconDetectionModel from a local path (when pre-downloaded).\n\n\n\n\n\n","category":"method"},{"location":"api/#OmniParserIconDetectors.load_detection_model-Tuple{}","page":"API Reference","title":"OmniParserIconDetectors.load_detection_model","text":"load_detection_model()\n\nDownloads the model weights from HuggingFace and returns an IconDetectionModel.\n\nRequires ENV[\"DATADEPS_ALWAYS_ACCEPT\"] = \"true\" to be set before calling this function.\n\n\n\n\n\n","category":"method"},{"location":"api/#OmniParserIconDetectors.load_image-Tuple{String}","page":"API Reference","title":"OmniParserIconDetectors.load_image","text":"load_image(path::String)\n\nLoad an image from the specified file path using ImageBase. Returns the loaded image or throws an error if the file cannot be loaded.\n\n\n\n\n\n","category":"method"},{"location":"api/#OmniParserIconDetectors.normalize_image_tensor","page":"API Reference","title":"OmniParserIconDetectors.normalize_image_tensor","text":"normalize_image_tensor(\n    img, means::Vector{Float32} = Float32[0.485, 0.456, 0.406],\n    stds::Vector{Float32} = Float32[0.229, 0.224, 0.225])\n\nNormalize the image tensor using ImageNet mean and standard deviation values. Input should be a Float32 array with values in [0,1] range.\n\n\n\n\n\n","category":"function"},{"location":"api/#OmniParserIconDetectors.path_to_points","page":"API Reference","title":"OmniParserIconDetectors.path_to_points","text":"path_to_points(path, scale::Real = 1.0, steps::Int = 30)\n\nConvert a path of drawing commands into a sequence of points.\n\nArguments\n\npath: Vector of tuples containing drawing commands ('M'=moveto, 'L'=lineto, 'C'=curveto)\nscale::Real: Scaling factor for the points (default: 1.0)\nsteps::Int: Number of interpolation steps for curves and lines (default: 30)\n\nReturns\n\nVector of (x,y) coordinate tuples representing the path\n\n\n\n\n\n","category":"function"},{"location":"api/#OmniParserIconDetectors.prepare_image_tensor-Tuple{Any}","page":"API Reference","title":"OmniParserIconDetectors.prepare_image_tensor","text":"prepare_image_tensor(img)\n\nTransform the image to the input format expected by the model. 3-dimensional array with dimensions (1, 3, H, W).\n\n\n\n\n\n","category":"method"},{"location":"api/#OmniParserIconDetectors.preprocess_image-Union{Tuple{AbstractArray{<:T}}, Tuple{T}} where T<:ColorTypes.Color","page":"API Reference","title":"OmniParserIconDetectors.preprocess_image","text":"preprocess_image(img::AbstractArray{<:T}) where {T <: ColorTypes.Color}\n\nPreprocess the image for the ONNX model:\n\nScale to 640px on the longest side\nConvert to RGB array\nNormalize using ImageNet mean and standard deviation values\n\nReturns the preprocessed image tensor and the scaling ratio.\n\n\n\n\n\n","category":"method"},{"location":"api/#OmniParserIconDetectors.resize_to_square","page":"API Reference","title":"OmniParserIconDetectors.resize_to_square","text":"resize_to_square(img, target_size::Int=640)\n\nResize the input image to a square shape of targetsize x targetsize while maintaining aspect ratio. Black (zero) padding is added to make it square. Image is aligned to top-left (0,0). Returns the square image and resize information needed to map coordinates back to original image.\n\n\n\n\n\n","category":"function"},{"location":"api/#OmniParserIconDetectors.save_image-Tuple{String, AbstractArray}","page":"API Reference","title":"OmniParserIconDetectors.save_image","text":"save_image(path::String, img::AbstractArray)\n\nSave an image to the specified file path using FileIO. Returns the path where the image was saved or throws an error if saving fails.\n\n\n\n\n\n","category":"method"},{"location":"api/#OmniParserIconDetectors.yolo_to_xxyy-Tuple{NTuple{4, Real}}","page":"API Reference","title":"OmniParserIconDetectors.yolo_to_xxyy","text":"yolo_to_xxyy(cxcywh::NTuple{4,Real})\n\nConvert bounding box from YOLO format (cx, cy, w, h) to (x1, y1, x2, y2).\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = OmniParserIconDetectors","category":"page"},{"location":"#OmniParserIconDetectors","page":"Home","title":"OmniParserIconDetectors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OmniParserIconDetectors.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A lightweight Julia wrapper for Microsoft's OmniParser icon detection model that:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Automatically detects UI elements like buttons and icons in screenshots\nProvides precise location and confidence scores for each detected element\nIncludes visualization tools to highlight detected elements","category":"page"},{"location":"","page":"Home","title":"Home","text":"Perfect for automated UI testing, accessibility tools, and computer vision applications. It's powered by Microsoft's OmniParser model and ONNXRunTime.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Project Page for more information about the model or try it out in the HuggingFace Demo.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\n# Install the package\nPkg.add(url=\"https://github.com/svilupp/OmniParserIconDetectors.jl\")\n\n# Important: This package requires a specific version of ONNXRunTime.jl\nPkg.add(url = \"https://github.com/svilupp/ONNXRunTime.jl\", rev = \"mac120\")\n\n# Set the environment variable to allow for automatic downloads\nENV[\"DATADEPS_ALWAYS_ACCEPT\"] = \"true\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"To simplify the installation process, you can run the scripts/0_set_up.jl script.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"#Loading-the-model","page":"Home","title":"Loading the model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ENV[\"DATADEPS_ALWAYS_ACCEPT\"] = \"true\" # Allow for automatic downloads\nusing OmniParserIconDetectors\n\n# Load the model (downloads weights automatically)\nmodel = load_detection_model()\n\n# Run detection on an image\nimg = joinpath(\"test\", \"images\", \"test1.png\")\ndetections = detect_icons(model, img)\n\n# Draw the detections on the image\nout = draw_detections(img, detections; save_path = \"examples/detection_example.png\")\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"Voila!","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Detection Example)","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#Basic-Detection","page":"Home","title":"Basic Detection","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using OmniParserIconDetectors\n\n# Load the model (downloads weights automatically)\n# Note: First load might take a few minutes to download the model weights (~850MB)\nmodel = load_detection_model()\n\n# Example paths - both local files and URLs are supported\nimg_path = \"test/images/test1.png\"\n# url_path = \"https://example.com/image.png\"\n\n# Detect icons in an image - multiple ways to do it:\n# 1. Using the convenience function\ndetections = detect_icons(model, img_path) #\n\n# 2. Using the model directly (same as above)\ndetections = model(img_path)\n\n# 3. With verbose output for debugging - useful for troubleshooting\ndetections = model(img_path; verbose=true)\n\n# The output is a Vector{DetectedItem}, where each item contains:\n# - id: Integer identifying the icon class (1-100)\n# - confidence: Float64 detection confidence score (0-100)\n# - bbox: Tuple of (x1, y1, x2, y2) coordinates in pixels","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: Use detect_icons(model, img_path; verbose=true) for debugging and to see the details!","category":"page"},{"location":"#Visualization","page":"Home","title":"Visualization","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can visualize the detections by drawing bounding boxes on the original image:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OmniParserIconDetectors: load_image\n\n# Load any image (supports common formats: png, jpg, etc.)\nimg = load_image(\"test/images/test1.png\")\n\n# Example detections\ndetections = [\n    DetectedItem(id=1, confidence=99.0, bbox=(50.0, 50.0, 200.0, 200.0)),  # High confidence detection\n    DetectedItem(id=22, confidence=85.5, bbox=(250.0, 100.0, 400.0, 250.0))  # Medium confidence detection\n]\n\n# Draw boxes and save the result\nimg_with_boxes = draw_detections(img, detections; \n    save_path=\"output.png\",  # Optional: save to file\n)\n\n# Or just draw boxes without saving\nimg_with_boxes = draw_detections(img, detections)","category":"page"},{"location":"#Detection-Results","page":"Home","title":"Detection Results","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Each DetectedItem contains:","category":"page"},{"location":"","page":"Home","title":"Home","text":"id: Unique identifier for the detected icon type (1-100)\nlabel: Class label (if available, not implemented yet)\nbbox: Tuple of (x1, y1, x2, y2) coordinates in original image space\nconfidence: Detection confidence score (0-100)","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Check out the examples/ folder for sample code and detection results:","category":"page"},{"location":"","page":"Home","title":"Home","text":"examples/detection_example.jl - Example of detected UI elements\nexamples/drawing_example.jl - Example of using the drawing utilities","category":"page"},{"location":"#Model-Weights-License-AGPL!","page":"Home","title":"Model Weights License - AGPL!","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package uses the OmniParser icon detection model from Microsoft, available at: https://huggingface.co/onnx-community/OmniParser-icon_detect","category":"page"},{"location":"","page":"Home","title":"Home","text":"[!IMPORTANT]","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the model checkpoint, please note that icondetect model is under AGPL license since it is a license inherited from the original yolo model. Please refer to the `LICENSEMODEL` or the original file at HuggingFace Repo.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The model weights are downloaded automatically from HuggingFace when the package is loaded, but you must set ENV[\"DATADEPS_ALWAYS_ACCEPT\"] = \"true\" to allow for automatic downloads.","category":"page"}]
}
